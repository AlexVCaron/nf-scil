nextflow_process {

    name "Test Process RECONST_DTIMETRICS"
    script "../main.nf"
    process "RECONST_DTIMETRICS"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "reconst"
    tag "reconst/dtimetrics"

    tag "subworkflows"
    tag "subworkflows/load_test_data"

    setup {
            run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
                script "../../../../../subworkflows/nf-scil/load_test_data/main.nf"
                process {
                    """
                    input[0] = Channel.from( [ "DWIss1000-dir32.zip",
                                               "segmentation.zip" ] )
                    input[1] = "test.load-test-data"
                    """
                }
            }
        }

    test("reconst - dtimetrics_with_b0mask") {
        config "./nextflow_light.config"
        when {
            process {
                """
                ch_split_test_data = LOAD_DATA.out.test_data_directory
                    .branch{
                        dwi: it.simpleName == "DWIss1000-dir32"
                        segmentation: it.simpleName == "segmentation"
                    }
                input[0] = ch_split_test_data.dwi.map{
                    test_data_directory -> [
                        [ id:'test' ],
                        file("\${test_data_directory}/dwi.nii.gz"),
                        file("\${test_data_directory}/dwi.bval"),
                        file("\${test_data_directory}/dwi.bvec")
                    ]
                }
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    Nifti_md5sum(process.out.fa.get(0).get(1)),
                    process.out.versions
                ).match() }
            )
        }
    }
}
